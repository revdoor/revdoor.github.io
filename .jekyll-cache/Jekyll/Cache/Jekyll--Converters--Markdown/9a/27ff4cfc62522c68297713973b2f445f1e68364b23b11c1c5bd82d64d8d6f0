I"<h2 id="문제-링크">문제 링크</h2>
<p>https://www.acmicpc.net/problem/12950</p>

<h2 id="문제-설명">문제 설명</h2>

<p>정점 $N$개로 이루어진 무방향 그래프 $G$가 주어집니다.
각 정점에는 $0$부터 $N-1$까지의 번호가 매겨져 있습니다.
각 간선에는 알파벳 소문자가 하나씩 쓰여 있습니다.</p>

<p>그래프의 보행은 시작점에서 출발해서 여러 정점과 간선을 방문해 도착점으로 이동하는 경로를 말하며, 경로 중 만나는 간선의 알파벳 소문자를 모두 이은 것을 보행의 값이라고 합니다.</p>

<p>$0$번 정점에서 $1$번 정점으로 가는 보행 중 값이 팰린드롬인 것 중 가장 짧은 것을 찾는 문제입니다.</p>

<h2 id="문제-풀이">문제 풀이</h2>

<p>DP, 그 중에서도 바텀업 DP를 통해 해결할 수 있습니다.</p>

<p><code class="language-plaintext highlighter-rouge">DP[a][b]</code>: 정점 <code class="language-plaintext highlighter-rouge">a</code>가 시작점, 정점 <code class="language-plaintext highlighter-rouge">b</code>가 도착점인 보행 중 팰린드롬인 것이 있다면 그 중 최소인 것의 길이, 없으면 -1로 정의합니다.</p>

<p>큐를 통해 확인할 정점 쌍을 관리합니다.
큐에는 길이가 3인 튜플 <code class="language-plaintext highlighter-rouge">(a, b)</code>을 넣어두며, 이는 정점 <code class="language-plaintext highlighter-rouge">a</code>와 정점 <code class="language-plaintext highlighter-rouge">b</code>를 잇는 보행 중 팰린드롬인 것이 있다는 의미입니다.</p>

<p>매번 큐에서 <code class="language-plaintext highlighter-rouge">(a, b)</code>를 뽑아냅니다.
이후, <code class="language-plaintext highlighter-rouge">a</code>에 인접한 정점 <code class="language-plaintext highlighter-rouge">na</code>, <code class="language-plaintext highlighter-rouge">b</code>에 인접한 정점 <code class="language-plaintext highlighter-rouge">nb</code> 중 <code class="language-plaintext highlighter-rouge">a-na</code> 간선에 부여된 알파벳과 <code class="language-plaintext highlighter-rouge">b-nb</code> 간선에 부여된 알파벳이 같고 <code class="language-plaintext highlighter-rouge">DP[na][nb]</code>가 -1인 것을 찾습니다.
이럴 경우, <code class="language-plaintext highlighter-rouge">na-a-...-b-nb</code>라는 팰린드롬 보행이 있으며 이것의 길이가 <code class="language-plaintext highlighter-rouge">DP[a][b]+2</code>가 됩니다.
따라서 큐에 <code class="language-plaintext highlighter-rouge">(na, nb)</code>를 넣어주고 <code class="language-plaintext highlighter-rouge">DP[na][nb]</code>를 <code class="language-plaintext highlighter-rouge">DP[a][b]+2</code>로 갱신합니다.</p>

<p>초기 큐에 <code class="language-plaintext highlighter-rouge">(i, i)</code> (<code class="language-plaintext highlighter-rouge">i = 0, 1, ..., n-1</code>)과 <code class="language-plaintext highlighter-rouge">(a, b)</code> (정점 <code class="language-plaintext highlighter-rouge">a</code>와 정점 <code class="language-plaintext highlighter-rouge">b</code>가 인접)을 넣어주고 시작합니다.
큐가 빌 때까지 반복한 후, <code class="language-plaintext highlighter-rouge">DP[0][1]</code>을 출력해주면 됩니다.</p>

<h2 id="시간복잡도-분석">시간복잡도 분석</h2>

<p>임의의 <code class="language-plaintext highlighter-rouge">DP[a][b]</code>는 최대 1번 갱신됩니다.
이는 이 값이 최솟값을 저장하고 있기 때문입니다.
따라서 큐의 총 길이는 $O(N^2)$가 됩니다.</p>

<p>또한, 임의의 <code class="language-plaintext highlighter-rouge">(a, b)</code>에 대해서 <code class="language-plaintext highlighter-rouge">na</code> 후보와 <code class="language-plaintext highlighter-rouge">nb</code> 후보를 확인하는 것은 $O(N^2)$만큼의 시간이 필요합니다.</p>

<p>최종적으로 시간복잡도는 $O(N^4)$가 됩니다.
$N$의 최댓값이 20이기 때문에, 시간 안에 해결할 수 있습니다.</p>
:ET